{"version":3,"sources":["components/login.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleSubmit","event","preventDefault","obj","state","login","data","JSON","stringify","xhr","XMLHttpRequest","open","onreadystatechange","readyState","alert","type","status","value","responseText","setState","setRequestHeader","send","handleChange","target","name","getBadgeClasses","classes","className","onSubmit","this","bind","onChange","placeholder","autoComplete","Component","GlobalStyle","createGlobalStyle","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+4BAoEeA,E,YA/Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,aAAe,SAACC,GACdA,EAAMC,iBACN,IAAMC,EAAM,EAAKC,MAAMC,MACjBC,EAAOC,KAAKC,UAAUL,GAExBM,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,UAAU,GAC3BF,EAAIG,mBAAqB,WACvB,GAAsB,IAAnBH,EAAII,WAAkB,CACvB,IAAMC,EAAK,KAAO,EAAKV,MAAMU,OAC7BA,EAAMC,KAAON,EAAIO,OACjBF,EAAMG,MAAQR,EAAIS,aAClB,EAAKC,SAAS,CAACL,YAGnBL,EAAIW,iBAAiB,eAAgB,oBACrCX,EAAIY,KAAKf,IAhCQ,EAmCnBgB,aAAe,SAACrB,GACdA,EAAMC,iBACN,IAAMG,EAAK,KAAO,EAAKD,MAAMC,OAC7BA,EAAMJ,EAAMsB,OAAOC,MAAQvB,EAAMsB,OAAON,MACxC,EAAKE,SAAS,CAACd,WAvCE,EA0CnBoB,gBAAkB,WAChB,IAAIC,EAAU,YAGd,OAFAA,GAAsC,MAA1B,EAAKtB,MAAMU,MAAMC,KAAgB,gBAAkB,eAC/DW,GAAsC,IAA1B,EAAKtB,MAAMU,MAAMC,KAAc,UAAY,YA3CvD,EAAKX,MAAQ,CACXU,MAAO,CACLC,KAAM,EACNE,MAAO,IAGTZ,MAAO,CACL,MAAS,GACT,SAAY,GACZ,YAAc,IAXD,E,sEAkDjB,OACI,yBAAKsB,UAAU,+BACb,0BAAMA,UAAU,aAAaC,SAAUC,KAAK7B,aAAa8B,KAAKD,OAC5D,yBAAKF,UAAWE,KAAKJ,mBAAmB,2BAAII,KAAKzB,MAAMU,MAAMC,KAArB,MAAiCc,KAAKzB,MAAMU,MAAMG,OAC1F,2BAAOc,SAAUF,KAAKP,aAAcP,KAAK,OAAOY,UAAU,mBAAmBK,YAAY,SAASR,KAAK,QAAQS,aAAa,aAC5H,2BAAOF,SAAUF,KAAKP,aAAcP,KAAK,WAAWY,UAAU,mBAAmBK,YAAY,WAAWR,KAAK,WAAWS,aAAa,qBACrI,4BAAQN,UAAU,oCAAlB,e,GAzDQO,a,2PCEpB,IAAMC,EAAcC,YAAH,KAoBFC,E,iLAXX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACH,EAAD,MACA,yBAAKR,UAAU,qCACX,kBAAC,EAAD,Y,GANMO,aCDEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c42e1872.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../stylesheets/login.css';\r\nimport { NONAME } from 'dns';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      alert: {\r\n        type: 0,\r\n        value: ''\r\n      },\r\n\r\n      login: {\r\n        'Email': '',\r\n        'Password': '',\r\n        'RememberMe': true\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const obj = this.state.login;\r\n    const data = JSON.stringify(obj);\r\n\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"/login\", true);\r\n    xhr.onreadystatechange = () => {\r\n      if(xhr.readyState === 4) {\r\n        const alert = {...this.state.alert};\r\n        alert.type = xhr.status;\r\n        alert.value = xhr.responseText;\r\n        this.setState({alert});\r\n      }\r\n    }\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.send(data);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    event.preventDefault();\r\n    const login = {...this.state.login};\r\n    login[event.target.name] = event.target.value;\r\n    this.setState({login});\r\n  }\r\n\r\n  getBadgeClasses = () => {\r\n    let classes = 'alert m3 ';\r\n    classes += (this.state.alert.type === 200) ? \"alert-success\" : \"alert-danger\";\r\n    classes += (this.state.alert.type === 0) ? \" d-none\" : \" d-block\";\r\n    return classes;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"App mx-auto vertical-center\">\r\n          <form className=\"login-form\" onSubmit={this.handleSubmit.bind(this)}>\r\n            <div className={this.getBadgeClasses()}><b>{this.state.alert.type}: </b>{this.state.alert.value}</div>\r\n            <input onChange={this.handleChange} type=\"text\" className=\"form-control m-3\" placeholder=\"E-mail\" name=\"Email\" autoComplete=\"username\" />\r\n            <input onChange={this.handleChange} type=\"password\" className=\"form-control m-3\" placeholder=\"Password\" name=\"Password\" autoComplete=\"current-password\" />\r\n            <button className=\"btn btn-primary btn-lg mr-3 ml-3\">Login</button>\r\n          </form>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { createGlobalStyle } from 'styled-components'\nimport Login from './components/login';\nimport './stylesheets/App.css';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: rgb(2,0,36) !important;\n    background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(35,35,102,1) 30%, rgba(0,142,255,1) 100%) !important;\n  }\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <GlobalStyle />\n        <div className=\"container mx-auto vertical-center\">\n            <Login />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}